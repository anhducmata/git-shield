#!/bin/bash

# git-shield: Pre-commit hook to prevent secret tokens from being committed
# Author: git-shield project

set -e

echo "üîí git-shield: scanning for secrets..."

# Get list of staged files
FILES=$(git diff --cached --name-only --diff-filter=ACM 2>/dev/null || echo "")

if [ -z "$FILES" ]; then
    echo "‚úÖ No files staged for commit."
    exit 0
fi

# Enhanced secret patterns including AI credentials
PATTERNS=(
    # AWS Access Keys
    "AKIA[0-9A-Z]{16}"
    "ASIA[0-9A-Z]{16}"
    "AKIA[0-9A-Z]{20}"
    "ASIA[0-9A-Z]{20}"
    
    # GitHub Personal Access Tokens
    "ghp_[A-Za-z0-9]{36}"
    "gho_[A-Za-z0-9]{36}"
    "ghu_[A-Za-z0-9]{36}"
    "ghs_[A-Za-z0-9]{36}"
    "ghr_[A-Za-z0-9]{36}"
    
    # Google API Keys
    "AIza[0-9A-Za-z-_]{35}"
    "AIza[0-9A-Za-z-_]{39}"
    
    # Slack Tokens
    "xox[baprs]-[0-9a-zA-Z]+"
    "xoxb-[0-9a-zA-Z]+"
    "xoxa-[0-9a-zA-Z]+"
    "xoxp-[0-9a-zA-Z]+"
    "xoxr-[0-9a-zA-Z]+"
    "xoxs-[0-9a-zA-Z]+"
    
    # Private Keys
    "-----BEGIN PRIVATE KEY-----"
    "-----BEGIN RSA PRIVATE KEY-----"
    "-----BEGIN DSA PRIVATE KEY-----"
    "-----BEGIN EC PRIVATE KEY-----"
    "-----BEGIN OPENSSH PRIVATE KEY-----"
    
    # Database URLs with passwords
    "postgresql://[^:]+:[^@]+@"
    "mysql://[^:]+:[^@]+@"
    "mongodb://[^:]+:[^@]+@"
    
    # API Keys (generic patterns)
    "api_key.*['\"][0-9a-zA-Z]{32,45}['\"]"
    "apikey.*['\"][0-9a-zA-Z]{32,45}['\"]"
    "secret.*['\"][0-9a-zA-Z]{32,45}['\"]"
    
    # AI Service Credentials
    "sk-[a-zA-Z0-9-_]{40,}"              # Main key
    "sk-proj-[a-zA-Z0-9-_]{40,}"         # Project key
    "sk-or-[a-zA-Z0-9-_]{40,}"           # Org key
    "sk-st-[a-zA-Z0-9-_]{40,}"           # Subtoken
    "[oO][pP][eE][nN][aA][iI]_api_key[\\s]*[=:][\\s]*[^\\s\\n\\r]{40,}"  # case-insensitive match

    # Anthropic API Keys
    "sk-ant-[a-zA-Z0-9-_]{40,}"
    "sk-ant-api03-[a-zA-Z0-9-_]{40,}"

    # Hugging Face Tokens
    "hf_[a-zA-Z0-9-_]{40,}"
    "huggingface[_-]api[_-]key[\\s]*[=:][\\s]*[^\\s\\n\\r]{40,}"

    # Cohere, Stability, ElevenLabs, Replicate (more tolerant)
    "[a-zA-Z_]*cohere[a-zA-Z_]*[\\s]*[=:][\\s]*[^\\s\\n\\r]{40,}"
    "[a-zA-Z_]*stability[a-zA-Z_]*[\\s]*[=:][\\s]*[^\\s\\n\\r]{40,}"
    "[a-zA-Z_]*elevenlabs[a-zA-Z_]*[\\s]*[=:][\\s]*[^\\s\\n\\r]{40,}"
    "r8_[a-zA-Z0-9-_]{40,}"  # Replicate API key

    # Generic secure value
    "[a-zA-Z0-9_]*(_)?(token|key|secret)[\\s]*[=:][\\s]*[^\\s\\n\\r\"']{30,}"


    # OpenAI API Keys - More flexible patterns
    "sk-[a-zA-Z0-9]{20,}"
    "sk-proj-[a-zA-Z0-9]{20,}"
    "sk-or-[a-zA-Z0-9]{20,}"
    "sk-st-[a-zA-Z0-9]{20,}"
    "openai_api_key.*[=:][^\\s\\n\\r]{20,}"
    "OPENAI_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # Anthropic API Keys
    "sk-ant-[a-zA-Z0-9]{20,}"
    "sk-ant-api03-[a-zA-Z0-9]{20,}"
    "anthropic_api_key.*[=:][^\\s\\n\\r]{20,}"
    "ANTHROPIC_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # Google AI (Vertex AI, Gemini) API Keys
    "AIza[0-9A-Za-z-_]{35,39}"
    "google_ai_api_key.*[=:][^\\s\\n\\r]{20,}"
    "GOOGLE_AI_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    "vertex_ai_api_key.*[=:][^\\s\\n\\r]{20,}"
    "VERTEX_AI_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    "gemini_api_key.*[=:][^\\s\\n\\r]{20,}"
    "GEMINI_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # Azure OpenAI API Keys
    "azure_openai_api_key.*[=:][^\\s\\n\\r]{20,}"
    "AZURE_OPENAI_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    "azure_cognitive_services_key.*[=:][^\\s\\n\\r]{20,}"
    "AZURE_COGNITIVE_SERVICES_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # AWS AI Services
    "aws_access_key_id.*[=:][^\\s\\n\\r]{16,}"
    "aws_secret_access_key.*[=:][^\\s\\n\\r]{28,}"
    "AWS_ACCESS_KEY_ID.*[=:][^\\s\\n\\r]{16,}"
    "AWS_SECRET_ACCESS_KEY.*[=:][^\\s\\n\\r]{28,}"
    
    # Hugging Face API Tokens
    "hf_[a-zA-Z0-9]{20,}"
    "huggingface_token.*[=:][^\\s\\n\\r]{20,}"
    "HUGGINGFACE_TOKEN.*[=:][^\\s\\n\\r]{20,}"
    "huggingface_api_key.*[=:][^\\s\\n\\r]{20,}"
    "HUGGINGFACE_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # Cohere API Keys
    "cohere_api_key.*[=:][^\\s\\n\\r]{20,}"
    "COHERE_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # Replicate API Keys
    "r8_[a-zA-Z0-9]{30,}"
    "replicate_api_token.*[=:][^\\s\\n\\r]{20,}"
    "REPLICATE_API_TOKEN.*[=:][^\\s\\n\\r]{20,}"
    
    # Stability AI API Keys
    "stability_api_key.*[=:][^\\s\\n\\r]{20,}"
    "STABILITY_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # ElevenLabs API Keys
    "elevenlabs_api_key.*[=:][^\\s\\n\\r]{20,}"
    "ELEVENLABS_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # AssemblyAI API Keys
    "assemblyai_api_key.*[=:][^\\s\\n\\r]{20,}"
    "ASSEMBLYAI_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # Deepgram API Keys
    "deepgram_api_key.*[=:][^\\s\\n\\r]{20,}"
    "DEEPGRAM_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # Pinecone API Keys
    "pinecone_api_key.*[=:][^\\s\\n\\r]{20,}"
    "PINECONE_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # Weaviate API Keys
    "weaviate_api_key.*[=:][^\\s\\n\\r]{20,}"
    "WEAVIATE_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # Qdrant API Keys
    "qdrant_api_key.*[=:][^\\s\\n\\r]{20,}"
    "QDRANT_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # Chroma API Keys
    "chroma_api_key.*[=:][^\\s\\n\\r]{20,}"
    "CHROMA_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # LangChain API Keys
    "langchain_api_key.*[=:][^\\s\\n\\r]{20,}"
    "LANGCHAIN_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # LangSmith API Keys
    "langsmith_api_key.*[=:][^\\s\\n\\r]{20,}"
    "LANGSMITH_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # Weights & Biases API Keys
    "wandb_api_key.*[=:][^\\s\\n\\r]{20,}"
    "WANDB_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # MLflow Tracking URIs with credentials
    "mlflow_tracking_uri.*[=:][^\\s\\n\\r]*://[^:]+:[^@]+@[^\\s\\n\\r]*"
    "MLFLOW_TRACKING_URI.*[=:][^\\s\\n\\r]*://[^:]+:[^@]+@[^\\s\\n\\r]*"
    
    # TensorBoard credentials
    "tensorboard.*[=:][^\\s\\n\\r]*://[^:]+:[^@]+@[^\\s\\n\\r]*"
    "TENSORBOARD.*[=:][^\\s\\n\\r]*://[^:]+:[^@]+@[^\\s\\n\\r]*"
    
    # Jupyter tokens
    "jupyter_token.*[=:][^\\s\\n\\r]{20,}"
    "JUPYTER_TOKEN.*[=:][^\\s\\n\\r]{20,}"
    
    # Streamlit secrets
    "streamlit_secrets.*[=:][^\\s\\n\\r]{20,}"
    "STREAMLIT_SECRETS.*[=:][^\\s\\n\\r]{20,}"
    
    # Gradio API keys
    "gradio_api_key.*[=:][^\\s\\n\\r]{20,}"
    "GRADIO_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # FastAPI API keys
    "fastapi_api_key.*[=:][^\\s\\n\\r]{20,}"
    "FASTAPI_API_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # Flask secret keys
    "flask_secret_key.*[=:][^\\s\\n\\r]{20,}"
    "FLASK_SECRET_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # Django secret keys
    "django_secret_key.*[=:][^\\s\\n\\r]{20,}"
    "DJANGO_SECRET_KEY.*[=:][^\\s\\n\\r]{20,}"
    
    # Node.js JWT secrets
    "jwt_secret.*[=:][^\\s\\n\\r]{20,}"
    "JWT_SECRET.*[=:][^\\s\\n\\r]{20,}"
    
    # Redis passwords
    "redis_password.*[=:][^\\s\\n\\r]{20,}"
    "REDIS_PASSWORD.*[=:][^\\s\\n\\r]{20,}"
    
    # Elasticsearch credentials
    "elasticsearch_password.*[=:][^\\s\\n\\r]{20,}"
    "ELASTICSEARCH_PASSWORD.*[=:][^\\s\\n\\r]{20,}"
)

found=0
secrets_found=()

for file in $FILES; do
    if [[ -f $file ]]; then
        # Check if file is text and handle encoding issues
        if file "$file" | grep -q "text\|ASCII\|UTF-8" || [[ $file =~ \.(txt|py|js|ts|json|yaml|yml|env|sh|bash|zsh|fish|ps1|bat|cmd|ini|cfg|conf|toml|md|rst|csv|log)$ ]]; then
            
            # Convert file to UTF-8 if needed (handles Windows encoding issues)
            temp_file="/tmp/git-shield-temp-$$"
            if command -v iconv >/dev/null 2>&1; then
                # Try to convert from common Windows encodings to UTF-8
                iconv -f UTF-16 -t UTF-8 "$file" 2>/dev/null > "$temp_file" || \
                iconv -f UTF-16LE -t UTF-8 "$file" 2>/dev/null > "$temp_file" || \
                iconv -f UTF-16BE -t UTF-8 "$file" 2>/dev/null > "$temp_file" || \
                cp "$file" "$temp_file"
            else
                cp "$file" "$temp_file"
            fi
            
            for pattern in "${PATTERNS[@]}"; do
                if grep -qE "$pattern" "$temp_file" 2>/dev/null; then
                    echo "‚ùå Potential secret found in $file (pattern: $pattern)"
                    secrets_found+=("$file:$pattern")
                    found=1
                fi
            done
            
            # Clean up temp file
            rm -f "$temp_file"
        fi
    fi
done

if [ "$found" -eq 1 ]; then
    echo ""
    echo "üö® SECURITY ALERT: Secrets detected in staged files!"
    echo "Please remove the following secrets before committing:"
    echo ""
    for secret in "${secrets_found[@]}"; do
        echo "  - $secret"
    done
    echo ""
    echo "üí° Tips:"
    echo "  - Use environment variables for secrets"
    echo "  - Add secret files to .gitignore"
    echo "  - Use .env files (and add .env to .gitignore)"
    echo "  - Store AI credentials in secure credential managers"
    echo "  - Use cloud-native secret management services"
    echo ""
    echo "‚ùå Commit blocked by git-shield."
    exit 1
else
    echo "‚úÖ No secrets found. Proceeding with commit."
fi
